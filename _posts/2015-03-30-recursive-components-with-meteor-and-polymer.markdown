---
layout: post
title:  "Recursive Components with Meteor and Polymer"
date:   2015-03-30
categories:
---

I spent some time last week playing with [Meteor’s](http://www.meteor.com/) Blaze templates and [Polymer](https://www.polymer-project.org/) elements to build recursive components. The final result is a neat DOM based [Cantor set](http://en.wikipedia.org/wiki/Cantor_set). Before we dig into the source, take a look at a polished version of the Polymer implementation on [Codepen](http://codepen.io/pcorey/pen/bNzXmg/):

<p data-height="268" data-theme-id="0" data-slug-hash="bNzXmg" data-default-tab="result" data-user="pcorey" class='codepen'>See the Pen <a href='http://codepen.io/pcorey/pen/bNzXmg/'>Polymer Cantor Set</a> by Pete Corey (<a href='http://codepen.io/pcorey'>@pcorey</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

## Building Our Cantor Set

The general idea is to build a component that renders one iteration of the Cantor set construction. By one iteration, I mean a single line (or block), and below it another line divided equally with another instance of the component, and blank space and another instance of the component.

I’m using [flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) to simplify the spacing between my components.

To get a better idea of the construction I’m describing, try inspecting the DOM generated by either, or both, of the implementations.

## Meteor Implementation

I started by experimenting with recursive [custom block helpers](/2015/01/13/custom-block-helpers-and-meteor-composability/) in Meteor. After some trial and error, I came up with a <code class="language-javascript">cantor</code> template that renders the <code class="language-javascript">Template.contentBlock</code> for the set pieces, and <code class="language-javascript">Template.elseBlock</code> for the empty pieces. Take a look at the template and the template’s helpers:

<pre class="language-markup"><code class="language-markup">&lt;template name="cantor"&gt;
    &lt;div class="row"&gt;
        &#123;&#123;&gt; Template.contentBlock&#125;&#125;
        &#123;&#123;#if more&#125;&#125;
            &lt;div class="flex"&gt;
                &#123;&#123;#cantor max=max i=next&#125;&#125;
                    &#123;&#123;&gt; Template.contentBlock&#125;&#125;
                &#123;&#123;else&#125;&#125;
                    &#123;&#123;&gt; Template.elseBlock&#125;&#125;
                &#123;&#123;/cantor&#125;&#125;

                &#123;&#123;&gt; Template.elseBlock&#125;&#125;

                &#123;&#123;#cantor max=max i=next&#125;&#125;
                    &#123;&#123;&gt; Template.contentBlock&#125;&#125;
                &#123;&#123;else&#125;&#125;
                    &#123;&#123;&gt; Template.elseBlock&#125;&#125;
                &#123;&#123;/cantor&#125;&#125;
            &lt;/div&gt;
        &#123;&#123;/if&#125;&#125;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>

<pre class="language-javascript"><code class="language-javascript">Template.cantor.helpers({
    more: function () {
        return (this.i || 0) < this.max-1;
    },
    next: function() {
        return (this.i || 0) + 1;
    }
});</code></pre>

There are a few key take-aways from this layout. The <code class="language-javascript">row</code> element defaults to <code class="language-javascript">display:block</code>, which forces its content onto a new line. The <code class="language-javascript">flex</code> element is set to <code class="language-javascript">display:flex</code>. All of its children have their widths set to 100%, which effectively evenly distributes them within the flex element.

The recursion is where the magic happens. You can see what we’re including the cantor custom block helper inside of itself! We’re passing in an incremented value of <code class="language-javascript">i</code> to the next iteration of the component. The component guards itself against infinite repetition with the <code class="language-javascript">{{#if more}}</code> check before recursing.

The Meteor implementation can be used like this:

<pre class="language-markup"><code class="language-markup">&#123;&#123;#cantor max=6&#125;&#125;
    &lt;section&gt;&nbsp;&lt;/section&gt;
&#123;&#123;else&#125;&#125;
    &lt;div class="E"&gt;&nbsp;&lt;/div&gt;
&#123;&#123;/cantor&#125;&#125;
</code></pre>

## Polymer Implementation

The Polymer implementation is very similar, if a little cleaner. Check out the source below:

<pre class="language-markup"><code class="language-markup">&lt;polymer-element name="flex-cantor" attributes="max i"&gt;
    &lt;template&gt;
        &lt;style&gt;
            .e &#123; border: 1px solid rgba(0,0,0,1); border-bottom: none; &#125;
            .c &#123; height: &#123;&#123;100/max&#125;&#125;vh; background-color: tomato; &#125;
            .f &#123; display: flex; &#125;
            *  &#123; width: 100%; &#125;
        &lt;/style&gt;
        &lt;div class="row"&gt;
            &lt;section class="c"&gt;&nbsp;&lt;/section&gt;
            &lt;template if="&#123;&#123;i &lt; max - 1&#125;&#125;"&gt;
                &lt;div class="f"&gt;
                    &lt;flex-cantor max="&#123;&#123;max&#125;&#125;" i="&#123;&#123;i + 1&#125;&#125;"&gt;&lt;/flex-cantor&gt;
                    &lt;section class="e"&gt;&nbsp;&lt;/section&gt;
                    &lt;flex-cantor max="&#123;&#123;max&#125;&#125;" i="&#123;&#123;i + 1&#125;&#125;"&gt;&lt;/flex-cantor&gt;
                &lt;/div&gt;
            &lt;/template&gt;
        &lt;/div&gt;
    &lt;/template&gt;
    &lt;script&gt;
        Polymer(&#123;
            i: 0,
            max: 0
        &#125;);
    &lt;/script&gt;
&lt;/polymer-element&gt;
</code></pre>

Polymer allows us to declare the style for the component inline with the component declaration. Additionally, due to the power of Polymer interpolation, we can include all of our increment and guard logic inline in the markup, rather than offloading these to helper methods like we were forced to do in the Meteor implementation.

The Polymer implementation can be used like this:

<pre class="language-markup"><code class="language-markup">&lt;flex-cantor max="6"&gt;&lt;/flex-cantor&gt;
 </code></pre>

## Final Thoughts

I set up a Github [repository](https://github.com/pcorey/flex-cantor/) with branches for both the Meteor implementation and the Polymer implementation. Check it out!

This was very much an experiment, but I’m very interested in further developing this idea. I can already think of other fun implementations of this idea, like a recursive version of my [golden spiral layout](http://codepen.io/pcorey/pen/raGKaO), but I’m more interested in practical applications for this type of component composition.

Let me know if you have any ideas for recursive components!
