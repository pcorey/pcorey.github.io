---
layout: post
title:  "Node Vulnerability Scanners in a 1.3 World"
titleParts: ["Node Vulnerability Scanners", "in a 1.3 World"]
excerpt: "Using NPM packages in your Meteor project opens you up to a world of vulnerabilities. How can you be sure you're using secure packages?"
author: "Pete Corey"
date:   2016-06-20
tags: ["Javascript", "Meteor", "Security"]
---

Meteor’s recent transition to [using NPM modules](http://info.meteor.com/blog/announcing-meteor-1.3) has opened up a world of possibilities for Meteor developers. Unfortunately, with great power comes great responsibility.

Along with a host of new functionality, [NPM packages](https://www.npmjs.com/) also come with a world of vulnerabilities and security concerns. In fact, [over 14% of all NPM modules have known vulnerabilities](https://snyk.io/#try).

## Node Security Project

Thankfully, there are teams and tools dedicated to tackling the problem of documenting and cataloging known Node.js module vulnerabilities. A very popular option for scanning and monitoring your NPM dependencies for known vulnerabilities is the [Node Security Platform](https://nodesecurity.io/).

In its most basic form, NSP offers a [command line tool](https://nodesecurity.io/opensource) that scans your `package.json`{:.language-bash} or your `npm-shrinkwrap.json`{:.language-bash} for know vulnerabilities.

Because all of your NPM dependencies are saved in the `package.json`{:.language-bash} file in your project root, using the `nsp`{:.language-javascript} tool to scan your Meteor project for vulnerabilities is a simple process:

<pre class="language-bash"><code class="language-bash">
> cd $YOUR_METEOR_PROJECT
> nsp check
(+) No known vulnerabilities found
</code></pre>

If NSP finds and vulnerable dependencies, you’ll be given more information and hopefully an upgrade patch that will fix the issue.

## Snyk

[Snyk](https://snyk.io/) is another tool designed to find vulnerable NPM dependencies within your Node.js project. The Snyk [command line tool](https://snyk.io/test#local-project) can be used just like the NSP command line tool:

<pre class="language-bash"><code class="language-bash">
> cd $YOUR_METEOR_PROJECT
> snyk test
✓ Tested ... for known vulnerabilities, no vulnerabilities found.
</code></pre>

Snyk even lets you test [GitHub repositories](https://snyk.io/test#github-repo) or [individual NPM modules](https://snyk.io/test#npm-package) using their web tool.

I’m a big fan of Snyk. Their [VulnDB](https://snyk.io/vuln/) is built on top of [Node Security Project’s advisories database](https://nodesecurity.io/advisories) and is taking strides to improve and build upon that great foundation. At the time of writing this article, Snyk has documented 105 Node.js vulnerabilities in their vulnerability database.

The Snyk team also regularly posts insightful [blog posts](https://snyk.io/blog/) about a variety of security topics.

## Meteor Package Dependencies

While NSP and Snyk are great options for testing your base project’s NPM dependencies for known vulnerabilities, there are other avenues for vulnerable Node packages to find their way into your Meteor project.

Pre-1.3 Meteor projects relied on using Meteor packages to pull in NPM dependencies or using the `meteorhacks:npm`{:.language-javascript} package to simulate direct dependencies within the base project. Both of these techniques obfuscate the actual NPM dependencies being used and make it difficult to scan them using traditional techniques.

Check out my post on [Scanning Meteor Projects for Node Vulnerabilities](/blog/2015/12/07/scanning-meteor-projects-for-node-vulnerabilities/) for information on writing a bash script to dive into a Meteor project’s build bundle to call `nsp check`{:.language-bash} or `snyk test`{:.language-bash} on a project’s entire dependency tree.

## Final Thoughts

Both the Node Security Platform and Snyk offer fantastic tools for scanning your Node.js and Meteor projects for known vulnerabilities. I recommend you pick one of these two tools and incorporate this type of vulnerability scanning into your development, deployment, and continuous integration workflow.

Using Snyk or NSP with a Meteor-specific vulnerability scanning tool such as [Package Scan](/blog/2015/04/27/meteor-package-scan/) will help give you some peace of mind as you move forward developing fantastic Meteor applications.
