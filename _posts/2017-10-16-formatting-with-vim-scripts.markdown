---
layout: post
title:  "Formatting with Vim Scripts"
excerpt: "Vim has become the cornerstone of my day-to-day work as a software developer. Check out how I use Vim scripts to format articles and posts."
author: "Pete Corey"
date:   2017-10-16
tags: ["Vim", "Markdown", "Literate Commits"]
---

Over the years my brain has become wired to [think in Vim](https://stackoverflow.com/a/1220118/96048) when it comes to editing text. For example, when I want to change an `if`{:.language-vim} guard, I don’t want to *`click`{:.language-vim}*, `<Del><Del><Del><Del><Del><Del>`{:.language-vim}. Instead I simply _change_ (`c`{:.language-vim}) _inside_ (`i`{:.language-vim}) _parentheses_ `(`{:.language-vim}.

The Vim Way™ of doing things has become so completely ingrained into me that I find myself reaching for Vim when it comes to any and every task involving editing text.

I’ve even incorporated Vim into my writing workflow. Check out how I use Vim scripts to format markdown and Git logs into the articles on this site.

## Formatting Markdown

I do the majority of my writing in [Ulysses](http://www.ulyssesapp.com/). While it’s a fantastic writing application, but it’s very stubborn about its [Markdown](https://en.wikipedia.org/wiki/Markdown) formatting. Combined with my even more stubborn [Jekyll](https://jekyllrb.com/) setup, I usually have to extensively massage every article before it’s formatted well enough to post.

This usually means doing things like decorating inline code blocks with language declarations, wrapping paragraph-style code blocks in `<pre><code>`{:.language-vim} tags, and other general formatting changes.

Originally, I did all of this work manually. Needless to say, that was a very time consuming and error-prone process.

While researching ways of automating the process, I had a recurring thought:

> I know how to make all of these changes in Vim. Can’t I just script them?

It turns out I could! A Vim “script” can be written by writing Vim commands directly into a file, and running that script file against the file you want to modify. Armed with the [global](http://vim.wikia.com/wiki/Power_of_g) and [normal](http://vim.wikia.com/wiki/Using_normal_command_in_a_script_for_searching) Vim commands, anything is possible.

---- 

As a quick introduction to this idea, imagine we have a script file called `script.vim`{:.language-vim}:

<pre class='language-vim'><code class='language-vim'>:%s/cat/dog/g
</code></pre>

And now imagine we have a file we want to modify:

<pre class='language-vim'><code class='language-vim'>I love cats!
Don't you love cats?
</code></pre>

Our script will replace all instances of `cat`{:.language-vim} with `dog`{:.language-vim}. We can run this script against our file by executing the following command and saving the resulting Vim buffer:

<pre class='language-vim'><code class='language-vim'>vim -s script.vim text
</code></pre>

---- 

Now that we have the basics under our belt, let’s take things up a notch. Here’s the Vim script I use to transform the markdown produced by Ulysses into a format accepted by Jekyll:

<pre class='language-vim'><code class='language-vim'>:%s/\t/    /g
:%s/’/'/g
:%s/“/"/g
:%s/”/"/g
:g/^\n    /exe "normal! o&lt;pre class='language-vim'>&lt;code class='language-vim'>\&lt;Esc>"
:g/pre class/exe "normal! }O&lt;/code>&lt;/pre>"
:g/pre class/exe "normal! V}2&lt;"
:%s/`.\{-}`{:.language-vim}/\0{:.language-vim}/g
</code></pre>

The first line replaces all tab characters with spaces. The next three lines replace unicode quotes with their standard ascii equivalents.

The fifth line is especially interesting. It matches on all lines who’s next line starts with four spaces. It goes into normal mode, opens a line below the matched line and inserts my `<pre ...><code ...>`{:.language-vim} tags.

The next line in the script finds where each code block ends and closes those tags.

If this script is saved in a file called `clean-post.vim`{:.language-vim}, I can run it on a markdown file with the following command:

<pre class='language-vim'><code class='language-vim'>vim -s ./clean-post.vim ./_posts/post.markdown
</code></pre>

As an added benefit, I can review the results of the transformation in Vim before saving the changes.

{% include newsletter.html %}

## Formatting Git Logs

Similarly, I have a script dedicated to formatting my [literate commit](http://www.east5th.co/blog/2016/07/11/literate-commits/) posts. This script is different.

Instead of formatting Markdown generated by Ulysses, it formats an entire `git log`{:.language-vim} (specifically `git log --reverse --full-diff --unified=1 -p .`{:.language-vim}),  into a human readable article:

<pre class='language-vim'><code class='language-vim'>Go
g/^Author:/d
:g/^Date:/d
:g/^commit/exe "normal! dwdwjjwwi[\&lt;Esc>A]({{page.repo}}/commit/\&lt;Esc>pA)\&lt;Esc>"
:g/^---/d
:g/^index/d
:g/^diff/d
:g/^new file/d
:g/^\\ No newline/d
:g/^@@.*@@$/d
:g/^@@/exe "normal! dt@..dwc$ ...\&lt;Esc>"
:g/^+++/exe "normal! dwd2li\&lt;CR>&lt;pre class='language-vimDiff'>&lt;p class='information'>\&lt;Esc>"
:g/pre class/exe "normal! A&lt;/p>&lt;code class='language-vimDiff'>\&lt;Esc>"
:g/^    /normal! 0d4l
:g/^ # \[/normal! dl
:g/^\n    /exe "normal! o&lt;pre class='language-vim'>&lt;code class='language-vim'>\&lt;Esc>V}2&lt;"
:g/pre class/exe "normal! }O&lt;/code>&lt;/pre>"
gg:%s/`.\{-}`{:.language-vim}/\0{:.language-vim}/g
</code></pre>

While this script seems intimidating, the majority of the work its doing is simple string replacements. Combined with some fancy work done in `normal`{:.language-vim} mode, it transforms the output of a full Git log into a [beautifully formatted markdown article](https://github.com/pcorey/pcorey.github.io/blob/master/_posts/2016-08-10-the-captains-distance-request.markdown).

Talk about power!

## Final Thoughts

Vim scripts are not pretty by any means, but they get the job done. I continually find myself amazed by the power and utility of Vim when it comes to nearly every aspect of text editing.

If you use Vim and you find yourself repeatedly making similar edits to files, I encourage you to consider scripting those edits. We should always be striving to improve our process, and writing Vim scripts is an incredibly powerful tool that we often overlook.
